; Welcome to tutorial # 2 - Program Flow

; In this tutorial, I will introduce to you the syntax of
; program flow and execution. You will end by making a
; a graphics demonstration in mode 3 with some random numbers
; thrown in for good measure.

; Just like in tutorial 1, lets set the title of the program
; and include our constants file.

#title "demo"
#include <gba.dbc>

; Declare variables.
dim x1,y1,x2,y2,x3,y3	; sides of a triangle
dim col			; color
dim i			; iterator for FOR loops

start:

; The first thing we will do is set the graphics mode to
; mode 3. This is a bitmapped mode, and not a tile mode. This
; means we will have access to all the pixels in video ram.

graphics 3,1

; Next we will enter into a while loop. We want this loop to
; execute forever, so there are no arguments to the WHILE
; statement.

while

	; Since we are in mode 3, let's make sure the screen is clear.  We
	; do this by using the CLS function.  It takes a color as its
	; argument.  BLACK is defined in PALETTE.DBC.

	cls BLACK

	; Now we will enter into another while loop, and continue execution
	; until the user presses the A button on the GBA.  We can check the
	; A button with the KEY function.  It will return the state of all
	; keys that we pass as arguments.  A value of 1 means that the key
	; is pressed, and 0 for released.

	while not key(KEY_A)

		; Now we will draw random triangles on the screen. We do
		; this with two functions:
		; - LINE draws a line on the screen; we call it three times,
		; once for each side of the triangle.  The LINE subroutine
		; needs two sets of X/Y coordinates and a 15-bit color.
		; - RND generates a random number.  To make sure the number
		; is within the boundaries of the screen, we use the MOD
		; (modulo) operator:
		; RND mod 240 will generate a random number from 0-239.
		; RND mod 160 will generate a random number from 0-159.

		x1 = rnd mod 240 : y1 = rnd mod 160
		x2 = rnd mod 240 : y2 = rnd mod 160
		x3 = rnd mod 240 : y3 = rnd mod 160
		col = rnd

		; Wait for the vertical blank before drawing the lines.

		vblank

		; Draw the three sides of the triangle.
		line x1,y1,x2,y2,col
		line x2,y2,x3,y3,col
		line x3,y3,x1,y1,col

	; Continue the while loop with a LOOP statement

	loop

	; Now we'll clear the screen again, this time to yellow.

	cls YELLOW

	; Next, we use a FOR loop to render scanlines over the display with
	; the LINE function.  A FOR loop has four main parts:
	; 	o A counter (i)
	;	o A starting value (1)
	;	o A direction (TO for up or DOWNTO for down)
	;	o A goal (159)
	;	o A step value (3)
	; By default, the step value is 1 for TO and -1 for DOWNTO.

	for i = 1 to 159 step 3

		; The LINE function needs two sets of X,Y coordinates, and a
		; color.
		line 0,i,239,i,DARKBLUE

	; Continue executing the FOR loop.

	next

	; Before we continue our loop, we will wait for the controller to
	; change states.  Since we knew the state of the controller after
	; the user pressed A, we can use that state to compare against.  We
	; do this with the INPUT function.  It waits to continue execution
	; until the state passed changes in some way.

	input KEY_A

; Continue the program loop

loop
